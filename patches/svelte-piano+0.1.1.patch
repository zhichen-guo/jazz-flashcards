diff --git a/node_modules/svelte-piano/dist/Instrument.js b/node_modules/svelte-piano/dist/Instrument.js
index 01b1397..8514a18 100644
--- a/node_modules/svelte-piano/dist/Instrument.js
+++ b/node_modules/svelte-piano/dist/Instrument.js
@@ -1,4 +1,5 @@
-import { Sampler, PingPongDelay, Reverb, Frequency } from 'tone';
+//import { Sampler, PingPongDelay, Reverb, Frequency } from 'tone';
+import * as Tone from 'tone';
 import { log } from 'fractils';
 import { DEV } from 'esm-env';
 const salamander = {
@@ -40,7 +41,7 @@ export class Instrument {
     keyboard;
     static count = 0;
     selectedInstrument = 'electric';
-    sampler = new Sampler({
+    sampler = new Tone.Sampler({
         ...Object.fromEntries(Object.entries(instruments[this.selectedInstrument])),
         onload: () => {
             this.sampler.volume.value = -6;
@@ -51,12 +52,12 @@ export class Instrument {
     });
     keydown;
     keyup;
-    pingpong = new PingPongDelay({
+    pingpong = new Tone.PingPongDelay({
         wet: 0.1,
         delayTime: 0.25,
         feedback: 0.5,
     });
-    reverb = new Reverb({
+    reverb = new Tone.Reverb({
         wet: 0.3,
         decay: 10,
         preDelay: 0.01,
@@ -69,7 +70,7 @@ export class Instrument {
         if (this.keyboard.onKeyDown)
             this.keydown = this.keyboard.onKeyDown.subscribe((note) => {
                 const transposition = this.keyboard.state.octave * 12;
-                const midiNote = Frequency(note.name).transpose(transposition).toFrequency();
+                const midiNote = Tone.Frequency(note.name).transpose(transposition).toFrequency();
                 this.sampler.triggerAttack(midiNote, '+0.01', note.velocity / 127);
             });
         if (this.keyboard.onKeyUp)
diff --git a/node_modules/svelte-piano/dist/Piano.svelte b/node_modules/svelte-piano/dist/Piano.svelte
index 15a87dd..44859d4 100644
--- a/node_modules/svelte-piano/dist/Piano.svelte
+++ b/node_modules/svelte-piano/dist/Piano.svelte
@@ -187,7 +187,7 @@ const handleTouchEnd = (e) => {
 };
 </script>
 
-<svelte:window on:touchmove="{(e) => handleTouchMove(e)}"></svelte:window><div class="keyboard" style="--theme-a: {$controls.theme.value.a}; --theme-b: {$controls.theme.value.b};"><div class="keys black">{#each Object.entries(keyboard.keys) as [code, key], i}{#if key.color === "black"}<div class="key black" on:touchstart|preventDefault on:touchend="{(e) => handleTouchEnd(e)}" on:touchcancel="{(e) => handleTouchEnd(e)}" on:pointerdown="{(e) => handleClick(e, code)}" on:pointerover="{(e) => handleMouseOver(e, code)}" on:focus="{(e) => handleMouseOver(e, code)}" class:active="{$activeKeys?.some((k) => k.name === key.name)}" style:position="relative" data-code="{code}"><div class="text">{#if $controls.notes.value}<div class="name">{key.name}</div>{/if}{#if $controls.keys.value}<div class="code">{keyCodes[i]}</div>{/if}</div></div>{:else if ![2, 7, 9, 14].includes(i)}<div class="spacer"></div>{/if}{/each}</div><div class="keys white">{#each Object.entries(keyboard.keys) as [code, key], i}{#if key.color === "white"}<div class="key white" on:touchstart|preventDefault on:touchend="{(e) => handleTouchEnd(e)}" on:touchcancel="{(e) => handleTouchEnd(e)}" on:pointerdown="{(e) => handleClick(e, code)}" on:pointerover="{(e) => handleMouseOver(e, code)}" on:focus="{(e) => handleMouseOver(e, code)}" class:active="{$activeKeys?.some((k) => k.name === key.name)}" data-code="{code}"><div class="text">{#if $controls.notes.value}<div class="name">{key.name}</div>{/if}{#if $controls.keys.value}<div class="code">{keyCodes[i]}</div>{/if}</div></div>{/if}{/each}</div></div>
+<svelte:window on:touchmove="{(e) => handleTouchMove(e)}"></svelte:window><div class="keyboard" style="--theme-a: {$controls.theme.value.a}; --theme-b: {$controls.theme.value.b};"><div class="keys black">{#each Object.entries(keyboard.keys) as [code, key], i}{#if key.color === "black"}<div class="key black" on:touchstart|preventDefault on:touchend="{(e) => handleTouchEnd(e)}" on:touchcancel="{(e) => handleTouchEnd(e)}" on:pointerdown="{(e) => handleClick(e, code)}" on:pointerover="{(e) => handleMouseOver(e, code)}" on:focus="{(e) => handleMouseOver(e, code)}" class:active="{$activeKeys?.some((k) => k.name === key.name)}" style:position="relative" data-code="{code}"><div class="text">{#if $controls.notes.value}<div class="name">{key.name}</div>{/if}{#if $controls.keys.value}<div class="code">{keyCodes[i]}</div>{/if}</div></div>{:else if ![2, 7, 9, 14, 19].includes(i)}<div class="spacer"></div>{/if}{/each}</div><div class="keys white">{#each Object.entries(keyboard.keys) as [code, key], i}{#if key.color === "white"}<div class="key white" on:touchstart|preventDefault on:touchend="{(e) => handleTouchEnd(e)}" on:touchcancel="{(e) => handleTouchEnd(e)}" on:pointerdown="{(e) => handleClick(e, code)}" on:pointerover="{(e) => handleMouseOver(e, code)}" on:focus="{(e) => handleMouseOver(e, code)}" class:active="{$activeKeys?.some((k) => k.name === key.name)}" data-code="{code}"><div class="text">{#if $controls.notes.value}<div class="name">{key.name}</div>{/if}{#if $controls.keys.value}<div class="code">{keyCodes[i]}</div>{/if}</div></div>{/if}{/each}</div></div>
 
 <style>.keyboard {
   display: flex;
diff --git a/node_modules/svelte-piano/dist/QwertyKeyboard.js b/node_modules/svelte-piano/dist/QwertyKeyboard.js
index aa4415f..523a601 100644
--- a/node_modules/svelte-piano/dist/QwertyKeyboard.js
+++ b/node_modules/svelte-piano/dist/QwertyKeyboard.js
@@ -133,7 +133,8 @@ export class QwertyKeyboard {
     //*        Mapping
     //*=======================
     get root() {
-        return this.rows === 1 ? 'KeyA' : 'KeyZ';
+        //return this.rows === 1 ? 'KeyA' : 'KeyZ';
+        return 'KeyQ';
     }
     /** `map` returns the midi note for a given keyCode.  */
     getMidiNote(keyCode) {
diff --git a/node_modules/svelte-piano/dist/keymap.js b/node_modules/svelte-piano/dist/keymap.js
index 0bed0ab..bc9464d 100644
--- a/node_modules/svelte-piano/dist/keymap.js
+++ b/node_modules/svelte-piano/dist/keymap.js
@@ -2,7 +2,7 @@
  * The map of each key to its corresponding note for
  * the a single-row layout.
  */
-export const keymapSingle = {
+/* export const keymapSingle = {
     KeyA: { key: 'A', color: 'white', midi: 60, name: 'C2', },
     KeyW: { key: 'W', color: 'black', midi: 61, name: 'C#2', },
     KeyS: { key: 'S', color: 'white', midi: 62, name: 'D2', },
@@ -21,7 +21,30 @@ export const keymapSingle = {
     KeyP: { key: 'P', color: 'black', midi: 75, name: 'D#3', },
     Semicolon: { key: ';', color: 'white', midi: 76, name: 'E3', },
     Quote: { key: '"', color: 'white', midi: 77, name: 'F3', },
-};
+}; */
+export const keymapSingle = {
+    // Top row starting with `Q`.
+    KeyQ:         { key: 'Q',  color: 'white',  midi: 60,  name: 'C2',  },
+    Digit2:       { key: '2',  color: 'black',  midi: 61,  name: 'C#2', },
+    KeyW:         { key: 'W',  color: 'white',  midi: 62,  name: 'D2',  },
+    Digit3:       { key: '3',  color: 'black',  midi: 63,  name: 'D#2', },
+    KeyE:         { key: 'E',  color: 'white',  midi: 64,  name: 'E2',  },
+    KeyR:         { key: 'R',  color: 'white',  midi: 65,  name: 'F2',  },
+    Digit5:       { key: '5',  color: 'black',  midi: 66,  name: 'F#2', },
+    KeyT:         { key: 'T',  color: 'white',  midi: 67,  name: 'G2',  },
+    Digit6:       { key: '6',  color: 'black',  midi: 68,  name: 'G#2', },
+    KeyY: 	      { key: 'Y',  color: 'white',  midi: 69,  name: 'A2',  },
+    Digit7:       { key: '7',  color: 'black',  midi: 70,  name: 'A#2', },
+    KeyU: 	      { key: 'U',  color: 'white',  midi: 71,  name: 'B2',  },
+    KeyI: 	      { key: 'I',  color: 'white',  midi: 72,  name: 'C3',  },
+    Digit9:       { key: '9',  color: 'black',  midi: 73,  name: 'C#3', },
+    KeyO: 	      { key: 'O',  color: 'white',  midi: 74,  name: 'D3',  },
+    Digit0:       { key: '0',  color: 'black',  midi: 75,  name: 'D#3', },
+    KeyP: 	      { key: 'P',  color: 'white',  midi: 76,  name: 'E3',  },
+    BracketLeft:  { key: '[',  color: 'white',  midi: 77,  name: 'F3',  },
+    Equal:        { key: '=',  color: 'black',  midi: 78,  name: 'F#3', },
+    BracketRight: { key: ']',  color: 'white',  midi: 79,  name: 'G3',  },
+}
 /**
  * The map of each keyboard code to its corresponding
  * piano note for a two-row layout.
